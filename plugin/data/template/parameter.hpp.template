// Generated by `rewrite_dsp.py`.

#pragma once

#include "../../common/dsp/constants.hpp"
#include "../../common/parameterInterface.hpp"

#include <memory>
#include <string>
#include <vector>

#ifdef TEST_DSP
  #include "../../test/value.hpp"
#else
  #include "../../common/value.hpp"
#endif

namespace Steinberg {
namespace Synth {

namespace ParameterID {
enum ID {
  bypass,
  aftertouch,
  pitchBend,
  modulationWheel,

  {% for prm in parameters -%}
  {{ prm.ident }},
  {% endfor %}
  ID_ENUM_LENGTH,
};
} // namespace ParameterID

struct Scales {
  static SomeDSP::UIntScale<double> boolScale;
  static SomeDSP::LinearScale<double> aftertouch;
  static SomeDSP::LinearScale<double> pitchBend;
  static SomeDSP::LinearScale<double> modulationWheel;

  {% for scale in scales %}
    {#- #}static SomeDSP::{{ scale.type }}Scale<double> {{ scale.label }};
  {% endfor %}
};

struct GlobalParameter : public ParameterInterface {
  std::vector<std::unique_ptr<ValueInterface>> value;

  GlobalParameter()
  {
    value.resize(ParameterID::ID_ENUM_LENGTH);

    using Info = Vst::ParameterInfo;
    using ID = ParameterID::ID;
    using LinearValue = DoubleValue<SomeDSP::LinearScale<double>>;
    using IntValue = DoubleValue<SomeDSP::IntScale<double>>;
    using LogValue = DoubleValue<SomeDSP::LogScale<double>>;
    using DecibelValue = DoubleValue<SomeDSP::DecibelScale<double>>;
    using NegativeDecibelValue = DoubleValue<SomeDSP::NegativeDecibelScale<double>>;
    using SemitoneValue = DoubleValue<SomeDSP::SemitoneScale<double>>;
    using SPolyValue = DoubleValue<SomeDSP::SPolyScale<double>>;

    value[ID::bypass] = std::make_unique<UIntValue>(
      0, Scales::boolScale, "bypass",
      Info::kCanAutomate | Info::kIsBypass);
    value[ID::aftertouch] = std::make_unique<LinearValue>(
      Scales::aftertouch.invmap(0), Scales::aftertouch, "aftertouch",
      Info::kCanAutomate);
    value[ID::pitchBend] = std::make_unique<LinearValue>(
      0, Scales::pitchBend, "pitchBend",
      Info::kCanAutomate);
    value[ID::modulationWheel] = std::make_unique<LinearValue>(
      Scales::modulationWheel.invmap(0), Scales::modulationWheel, "modulationWheel",
      Info::kCanAutomate);

    {% for prm in parameters -%}
    value[ID::{{ prm.ident }}] = std::make_unique<{{ prm.value_type }}>(
      Scales::{{ prm.scale }}.invmap({{ prm.init }}),
      Scales::{{ prm.scale }},
      "{{ prm.ident }}",
      0{% for hint in prm.hints %} | {{hint}}{% endfor %});
    {% endfor %}

    for (size_t id = 0; id < value.size(); ++id) value[id]->setId(Vst::ParamID(id));
  }

#ifdef TEST_DSP
  // Not used in DSP test.
  double getDefaultNormalized(int32_t) { return 0.0; }

#else
  tresult setState(IBStream *stream)
  {
    IBStreamer streamer(stream, kLittleEndian);
    for (auto &val : value)
      if (val->setState(streamer)) return kResultFalse;
    return kResultOk;
  }

  tresult getState(IBStream *stream)
  {
    IBStreamer streamer(stream, kLittleEndian);
    for (auto &val : value)
      if (val->getState(streamer)) return kResultFalse;
    return kResultOk;
  }

  tresult addParameter(Vst::ParameterContainer &parameters)
  {
    for (auto &val : value)
      if (val->addParameter(parameters)) return kResultFalse;
    return kResultOk;
  }

  double getDefaultNormalized(int32_t tag) override
  {
    if (size_t(abs(tag)) >= value.size()) return 0.0;
    return value[tag]->getDefaultNormalized();
  }
#endif
};

} // namespace Synth
} // namespace Steinberg
