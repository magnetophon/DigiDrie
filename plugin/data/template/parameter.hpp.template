// Generated by generate_parameter_hpp.py

#pragma once

#include "../common/dsp/scale.hpp"
#include "../common/parameterinterface.hpp"
#include "../common/value.hpp"

#include <memory>
#include <string>
#include <vector>

#include <iostream>

#ifdef TEST_BUILD
static const uint32_t kParameterIsAutomable = 0x01;
static const uint32_t kParameterIsBoolean = 0x02;
static const uint32_t kParameterIsInteger = 0x04;
static const uint32_t kParameterIsLogarithmic = 0x08;
#endif

namespace ParameterID {
enum ID {
  bypass,
  aftertouch,
  pitchBend,
  modulationWheel,

  {% for prm in parameters -%}
  {{ prm.ident }},
  {% endfor %}
  ID_ENUM_LENGTH,
};
} // namespace ParameterID

struct Scales {
  static SomeDSP::IntScale<double> boolScale;
  static SomeDSP::LinearScale<double> aftertouch;
  static SomeDSP::LinearScale<double> pitchBend;
  static SomeDSP::LinearScale<double> modulationWheel;

  {% for scale in scales %}
    {#- #}static SomeDSP::{{ scale.type }}Scale<double> {{ scale.label }};
  {% endfor %}
};

struct GlobalParameter : public ParameterInterface {
  std::vector<std::unique_ptr<ValueInterface>> value;

  GlobalParameter()
  {
    value.resize(ParameterID::ID_ENUM_LENGTH);

    using ID = ParameterID::ID;
    using LinearValue = FloatValue<SomeDSP::LinearScale<double>>;
    using LogValue = FloatValue<SomeDSP::LogScale<double>>;
    using SPolyValue = FloatValue<SomeDSP::SPolyScale<double>>;
    // using DecibelValue = FloatValue<SomeDSP::DecibelScale<double>>;

    value[ID::bypass] = std::make_unique<IntValue>(
      0, Scales::boolScale, "bypass",
      kParameterIsAutomable | kParameterIsBoolean);
    value[ID::aftertouch] = std::make_unique<LinearValue>(
      Scales::aftertouch.invmap(0), Scales::aftertouch, "aftertouch",
      kParameterIsAutomable);
    value[ID::pitchBend] = std::make_unique<LinearValue>(
      0, Scales::pitchBend, "pitchBend",
      kParameterIsAutomable);
    value[ID::modulationWheel] = std::make_unique<LinearValue>(
      Scales::modulationWheel.invmap(0), Scales::modulationWheel, "modulationWheel",
      kParameterIsAutomable);

    {% for prm in parameters -%}
    value[ID::{{ prm.ident }}] = std::make_unique<{{ prm.value_type }}>(
      {% if prm.value_type == "IntValue" -%}
        {{ prm.init }}
      {%- else -%}
        Scales::{{ prm.scale }}.invmap({{ prm.init }})
      {%- endif %},
      Scales::{{ prm.scale }},
      "{{ prm.ident }}",
      0{% for hint in prm.hints %} | {{hint}}{% endfor %});
    {% endfor %}
  }

#ifndef TEST_BUILD
  void initParameter(uint32_t index, Parameter &parameter)
  {
    if (index >= value.size()) return;
    value[index]->setParameterRange(parameter);
  }
#endif

  size_t idLength() override { return value.size(); }

  void resetParameter()
  {
    for (auto &val : value) val->setFromNormalized(val->getDefaultNormalized());
  }

  double getNormalized(uint32_t index) const override
  {
    if (index >= value.size()) return 0.0;
    return value[index]->getNormalized();
  }

  double getDefaultNormalized(uint32_t index) const override
  {
    if (index >= value.size()) return 0.0;
    return value[index]->getDefaultNormalized();
  }

  double getFloat(uint32_t index) const override
  {
    if (index >= value.size()) return 0.0;
    return value[index]->getFloat();
  }

  double getInt(uint32_t index) const override
  {
    if (index >= value.size()) return 0.0;
    return value[index]->getInt();
  }

  void setParameterValue(uint32_t index, float raw)
  {
    if (index >= value.size()) return;
    value[index]->setFromFloat(raw);
  }

  double parameterChanged(uint32_t index, float raw) override
  {
    if (index >= value.size()) return 0.0;
    value[index]->setFromFloat(raw);
    return value[index]->getNormalized();
  }

  double updateValue(uint32_t index, float normalized) override
  {
    if (index >= value.size()) return 0.0;
    value[index]->setFromNormalized(normalized);
    return value[index]->getFloat();
  }

  enum Preset {
    presetDefault,

    Preset_ENUM_LENGTH,
  };

  std::array<const char *, 31> programName{
    "Default",
  };

#ifndef TEST_BUILD
  void initProgramName(uint32_t index, String &programName)
  {
    programName = this->programName[index];
  }

  void loadProgram(uint32_t index) override;
#endif

  void validate()
  {
    for (size_t i = 0; i < value.size(); ++i) {
      if (value[i] == nullptr) {
        std::cout << "PluginError: GlobalParameter::value[" << std::to_string(i)
                  << "] is nullptr. Forgetting initialization?\n";
        std::exit(EXIT_FAILURE);
      }
    }
  }
};
