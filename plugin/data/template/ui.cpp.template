// TODO: Generate this.

#include <iostream>
#include <memory>
#include <sstream>
#include <tuple>
#include <unordered_map>
#include <vector>

#include "../common/uibase.hpp"
#include "parameter.hpp"

START_NAMESPACE_DISTRHO

constexpr float uiTextSize = 14.0f;
constexpr float midTextSize = 16.0f;
constexpr float infoTextSize = 18.0f;
constexpr float pluginNameTextSize = 22.0f;
constexpr float margin = 5.0f;
constexpr float uiMargin = 20.0f;
constexpr float labelHeight = 20.0f;
constexpr float labelY = 30.0f;
constexpr float knobWidth = 50.0f;
constexpr float knobHeight = 40.0f;
constexpr float spreadKnobWidth = 20.0f;
constexpr float knobX = 60.0f; // With margin.
constexpr float knobY = knobHeight + labelY;
constexpr float xyPadSize = 128.0f;
constexpr float matrixKnobSize = labelHeight;
constexpr float crossfade_width = xyPadSize + knobX + uiMargin;
constexpr float crossfade_height = xyPadSize + labelY + uiMargin;

constexpr float sectionHeight = labelY + knobY;
constexpr float knobPairWidth = knobX + spreadKnobWidth;
constexpr float innerWidth = 1400;
constexpr float innerHeight = 800;

constexpr uint32_t defaultWidth = uint32_t(2 * uiMargin + innerWidth);
constexpr uint32_t defaultHeight = uint32_t(2 * uiMargin + innerHeight);

enum globaltabIndex {
  global,
  main,
  l_roffset,
  envelope,
  lfo,
  modulation,
};

class DigiDrieUI : public PluginUIBase {
protected:
  {% for macro, controls in crossfade_items.items() -%}
  std::shared_ptr<XYPad> xypad_abcd_{{ macro }}_main;
  std::shared_ptr<XYPad> xypad_abcd_{{ macro }}_offset;
  {% for ctrl, addr in controls.items() -%}
  std::shared_ptr<ValueWidget> widget_{{ macro }}_{{ ctrl }}_main;
  std::shared_ptr<ValueWidget> widget_{{ macro }}_{{ ctrl }}_offset;
  {% endfor %}
  {% endfor %}

  std::shared_ptr<XYPad> xypad_xy;
  std::shared_ptr<XYPad> xypad_xz;
  std::shared_ptr<XYPad> xypad_zy;
  std::shared_ptr<ValueWidget> widget_axis1;
  std::shared_ptr<ValueWidget> widget_axis2;
  std::shared_ptr<ValueWidget> widget_axis3;

  void onNanoDisplay() override
  {
    beginPath();
    rect(0, 0, getWidth(), getHeight());
    fillColor(palette.background());
    fill();
  }

  void parameterChanged(uint32_t index, float value) override
  {
    PluginUIBase::parameterChanged(index, value);
  }

  bool syncUI(uint32_t id, float normalized) {
    using ID = ParameterID::ID;

    switch (id) {
      {% for macro, controls in crossfade_items.items() -%}
      {% for ctrl, addr in controls.items() -%}
      case ID::{{ addr["main"] }}:
        xypad_abcd_{{ macro }}_main->setValueAt({{ loop.index0 }}, normalized);
        widget_{{ macro }}_{{ ctrl }}_main->setValue(normalized);
        break;

      case ID::{{ addr["l_roffset"] }}:
        xypad_abcd_{{ macro }}_offset->setValueAt({{ loop.index0 }}, normalized);
        widget_{{ macro }}_{{ ctrl }}_offset->setValue(normalized);
        break;
      {% endfor %}
      {% endfor %}

      case ID::{{ modulation_axes["1"] }}:
        xypad_xy->setValueAt(0, normalized);
        xypad_xz->setValueAt(0, normalized);
        widget_axis1->setValue(normalized);
        break;

      case ID::{{ modulation_axes["2"] }}:
        xypad_xy->setValueAt(1, normalized);
        xypad_zy->setValueAt(1, normalized);
        widget_axis2->setValue(normalized);
        break;

      case ID::{{ modulation_axes["3"] }}:
        xypad_xz->setValueAt(1, normalized);
        xypad_zy->setValueAt(0, normalized);
        widget_axis3->setValue(normalized);
        break;

      default:
        return false;
    }
    repaint();
    return true;
  }

  void updateUI(uint32_t id, float normalized) override
  {
    if (syncUI(id, normalized)) return;
    PluginUIBase::updateUI(id, normalized);
    return;
  }

  void updateValue(uint32_t id, float normalized) override
  {
    syncUI(id, normalized);
    PluginUIBase::updateValue(id, normalized);
    return;
  }

  DISTRHO_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR(DigiDrieUI)

public:
  DigiDrieUI() : PluginUIBase(defaultWidth, defaultHeight)
  {
    param = std::make_unique<GlobalParameter>();

    setGeometryConstraints(defaultWidth, defaultHeight, true, true);

    if (palette.fontPath().size() > 0)
      fontId = createFontFromFile("main", palette.fontPath().c_str());

    if (fontId < 0) {
      fontId = createFontFromMemory(
        "main", (unsigned char *)(FontData::TinosBoldItalicData),
        FontData::TinosBoldItalicDataSize, false);
    }

    using ID = ParameterID::ID;

    const auto top0 = 20.0f;
    const auto left0 = 20.0f;

    const auto tabTop0 = top0;
    const auto tabLeft0 = left0;
    const auto globaltabInnerWidth = 10 * knobPairWidth;
    const auto globaltabWidth = globaltabInnerWidth + 2 * uiMargin;
    const auto globaltabHeight = innerHeight;
    std::vector<std::string> globalTabs = {
      "Global",
      "Main",
      "L-R Offset",
      "Envelope",
      "LFO",
      "Modulation",
    };
    auto tabviewGlobal
      = addTabView(tabLeft0, tabTop0, globaltabWidth, globaltabHeight,
        uiTextSize, labelY, globalTabs);

    const auto globaltabInsideTop0 = tabTop0 + labelY + uiMargin;
    const auto globaltabInsideLeft0 = tabLeft0 + uiMargin;

    {# Macro tabs. -#}
    constexpr uint32_t nRow = {{ nMacroParam }};
    constexpr uint32_t nCol = {{ nrMacro }};
    constexpr uint32_t matrixWidth = nCol * matrixKnobSize;
    constexpr uint32_t matrixHeight = nRow * matrixKnobSize;
    constexpr float matrixLabelWidth = 2 * knobX - margin;
    const auto macroTop0 = globaltabInsideTop0;
    const auto macroTop1 = macroTop0 + 2 * labelHeight;
    const auto macroTop2 = macroTop1 + matrixHeight + margin;
    const auto macroLeft0 = globaltabInsideLeft0;
    const auto macroLeft1 = macroLeft0 + 2 * knobX;
    std::vector<uint32_t> mainMatrixId(nRow * nCol);
    std::vector<uint32_t> offsetMatrixId(nRow * nCol);
    {% for macro, sections in osc_items.items() %}
    constexpr uint32_t {{ macro }}_index = {{ loop.index0 }};
    {% set ns = namespace(row=0) -%}
    {% for sctn, controls in sections.items() -%}
    {% for ctrl, addr in controls.items() -%}
    {% if macro == "macro1" %}
    tabviewGlobal->addWidget(globaltabIndex::main,
      addLabel(macroLeft0, macroTop1 + {{ ns.row }} * matrixKnobSize,
        matrixLabelWidth, matrixKnobSize, uiTextSize,
        "{{ sctn }}.{{ ctrl }}", ALIGN_RIGHT | ALIGN_MIDDLE));
    tabviewGlobal->addWidget(globaltabIndex::l_roffset,
      addLabel(macroLeft0, macroTop1 + {{ ns.row }} * matrixKnobSize,
        matrixLabelWidth, matrixKnobSize, uiTextSize,
        "{{ sctn }}.{{ ctrl }}", ALIGN_RIGHT | ALIGN_MIDDLE));
    {%- endif %}
    mainMatrixId[{{ macro }}_index + {{ ns.row }} * nCol]
      = ID::{{ addr["main"] }};
    offsetMatrixId[{{ macro }}_index + {{ ns.row }} * nCol]
      = ID::{{ addr["l_roffset"] }};
    {%- set ns.row = ns.row + 1 -%}
    {% endfor -%}
    {% endfor %}
    {% endfor -%}

    tabviewGlobal->addWidget(globaltabIndex::main,
      addLabel(macroLeft1, macroTop0 - margin,
        matrixWidth, matrixKnobSize, uiTextSize, "Macro"));
    tabviewGlobal->addWidget(globaltabIndex::l_roffset,
      addLabel(macroLeft1, macroTop0 - margin,
        matrixWidth, matrixKnobSize, uiTextSize, "Macro"));
    {% for idx in range(1, nrMacro + 1) %}
    tabviewGlobal->addWidget(globaltabIndex::main,
      addLabel(macroLeft1 + {{ loop.index0 }} * matrixKnobSize, macroTop0 + matrixKnobSize,
        matrixKnobSize, matrixKnobSize, uiTextSize, "{{ idx }}"));
    tabviewGlobal->addWidget(globaltabIndex::l_roffset,
      addLabel(macroLeft1 + {{ loop.index0 }} * matrixKnobSize, macroTop0 + matrixKnobSize,
        matrixKnobSize, matrixKnobSize, uiTextSize, "{{ idx }}"));
    {% endfor %}

    auto textViewMainStatus = addTextView(
      macroLeft0, macroTop2, matrixWidth + knobX + margin, 2 * labelHeight,
      uiTextSize, "Initialized.");
    tabviewGlobal->addWidget(globaltabIndex::main, textViewMainStatus);
    tabviewGlobal->addWidget(globaltabIndex::main,
      addMatrixKnob(
        macroLeft1, macroTop1, matrixWidth, matrixHeight,
        nRow, nCol, mainMatrixId, textViewMainStatus));

    auto textViewOffsetStatus = addTextView(
      macroLeft0, macroTop2, matrixWidth + knobX + margin, 2 * labelHeight,
      uiTextSize, "Initialized.");
    tabviewGlobal->addWidget(globaltabIndex::l_roffset, textViewOffsetStatus);
    tabviewGlobal->addWidget(globaltabIndex::l_roffset,
      addMatrixKnob(
        macroLeft1, macroTop1, matrixWidth, matrixHeight,
        nRow, nCol, offsetMatrixId, textViewOffsetStatus));

    const auto abcd_crossfade_top0 = globaltabInsideTop0;
    const auto abcd_crossfade_left0
      = globaltabInsideLeft0 + 2 * knobX + matrixWidth + uiMargin;
    {% for macro, controls in crossfade_items.items() -%}
    const auto abcd_crossfade_top0_{{ macro }}
      = abcd_crossfade_top0 + {{ loop.index0 % 4 }} * crossfade_height;
    const auto abcd_crossfade_top1_{{ macro }}
      = abcd_crossfade_top0_{{ macro }} + knobY;
    const auto abcd_crossfade_left0_{{ macro }}
      = abcd_crossfade_left0 + {{ loop.index0 // 4 }} * crossfade_width;
    const auto abcd_crossfade_left1_{{ macro }}
      = abcd_crossfade_left0_{{ macro }} + xyPadSize + 2 * margin;
    tabviewGlobal->addWidget(globaltabIndex::main,
      addLabel(abcd_crossfade_left0_{{ macro }}, abcd_crossfade_top0_{{ macro }},
        xyPadSize, labelHeight, uiTextSize, "{{ macro }}"));
    tabviewGlobal->addWidget(globaltabIndex::l_roffset,
      addLabel(abcd_crossfade_left0_{{ macro }}, abcd_crossfade_top0_{{ macro }},
        xyPadSize, labelHeight, uiTextSize, "{{ macro }}"));
    xypad_abcd_{{ macro }}_main = addXYPad(
      abcd_crossfade_left0_{{ macro }}, abcd_crossfade_top0_{{ macro }} + labelY,
      xyPadSize, xyPadSize,
      ID::{{ controls["ab_cd"]["main"] }}, ID::{{ controls["ac_bd"]["main"] }});
    tabviewGlobal->addWidget(globaltabIndex::main, xypad_abcd_{{ macro }}_main);
    xypad_abcd_{{ macro }}_offset = addXYPad(
      abcd_crossfade_left0_{{ macro }}, abcd_crossfade_top0_{{ macro }} + labelY,
      xyPadSize, xyPadSize,
      ID::{{ controls["ab_cd"]["l_roffset"] }}, ID::{{ controls["ac_bd"]["l_roffset"] }});
    tabviewGlobal->addWidget(globaltabIndex::l_roffset, xypad_abcd_{{ macro }}_offset);
    {% for ctrl, addr in controls.items() -%}
    auto tuple_{{ macro }}_{{ ctrl }}_main = addKnob(
      abcd_crossfade_left1_{{ macro }}, abcd_crossfade_top{{ loop.index0 }}_{{ macro }},
      knobWidth, margin, uiTextSize,
      "{{ ctrl }}", ID::{{ addr["main"] }});
    widget_{{ macro }}_{{ ctrl }}_main = std::get<0>(tuple_{{ macro }}_{{ ctrl }}_main);
    tabviewGlobal->addWidget(globaltabIndex::main, tuple_{{ macro }}_{{ ctrl }}_main);
    auto tuple_{{ macro }}_{{ ctrl }}_offset = addKnob(
      abcd_crossfade_left1_{{ macro }}, abcd_crossfade_top{{ loop.index0 }}_{{ macro }},
      knobWidth, margin, uiTextSize,
      "{{ ctrl }}", ID::{{ addr["l_roffset"] }});
    widget_{{ macro }}_{{ ctrl }}_offset = std::get<0>(tuple_{{ macro }}_{{ ctrl }}_offset);
    tabviewGlobal->addWidget(globaltabIndex::l_roffset, tuple_{{ macro }}_{{ ctrl }}_offset);
    {% endfor %}
    {% endfor -%}

    {% for label, ctrl in osc_type.items() -%}
    std::vector<std::string> osc_type_{{ label }}_options = {
      {% for menu in ctrl["menu"].keys() -%}
      "{{ menu }}",
      {% endfor %}
    };
    //tabviewGlobal->addWidget(globaltabIndex::main,
    //  addOptionMenu(
    //    macrotabInsideLeft0 + knobPairWidth,
    //    macrotabInsideTop0 + {{ loop.index }} * sectionHeight,
    //    2 * knobX, labelHeight, uiTextSize,
    //    ID::{{ ctrl["address"] }}, osc_type_{{ label }}_options));
    {% endfor -%}

    {# Global tab. -#}
    const auto global_top0 = globaltabInsideTop0;
    const auto global_top1 = global_top0 + labelY;
    const auto global_top2 = global_top1 + knobY;
    const auto global_left1 = globaltabInsideLeft0 + 2 * knobX;
    //{% for ctrl, addr in global_items.items() -%}
    //tabviewGlobal->addWidget(globaltabIndex::global,
    //  addKnob(globaltabInsideLeft0 + {{ loop.index0 }} * 2 * knobX, global_top1,
    //    knobWidth, margin, uiTextSize,
    //    "{{ ctrl }}", ID::{{ addr }}));
    //{% endfor %}
    {% for ctrl, item in global_items.items() -%}
    tabviewGlobal->addWidget(globaltabIndex::global,
      addLabel(globaltabInsideLeft0 + {{ loop.index0 }} * 2 * knobX, global_top1,
        knobX, labelHeight, uiTextSize,
        "{{ ctrl }}"));
    tabviewGlobal->addWidget(globaltabIndex::global,
      addTextKnob(globaltabInsideLeft0 + {{ loop.index0 }} * 2 * knobX, global_top1 + labelY,
        knobWidth, labelHeight, uiTextSize,
        ID::{{ item["address"] }},
        Scales::{{ item["scale"] }}, false, 3));
    {% endfor %}
    {% for label, ctrl in global_menus.items() -%}
    std::vector<std::string> {{ label }}_options = {
      {% for menu in ctrl["menu"].keys() -%}
      "{{ menu }}",
      {% endfor %}
    };
    tabviewGlobal->addWidget(globaltabIndex::global,
      addOptionMenu(
        globaltabInsideLeft0, global_top2 + {{ loop.index0 }} * labelY,
        knobX, labelHeight, uiTextSize,
        ID::{{ ctrl["address"] }}, {{ label }}_options));
    {% endfor %}
    {% for label, addr in global_checkboxes.items() -%}
    tabviewGlobal->addWidget(globaltabIndex::global,
      addCheckbox(
        global_left1, global_top2 + {{ loop.index0 }} * labelY,
        2 * knobX, labelHeight, uiTextSize,
        "{{ label }}", ID::{{ addr }}));
    {% endfor %}

    {# Envelope tab. -#}
    {% for sctn, controls in envelope_items.items() -%}
    const auto {{ sctn }}_top0 = globaltabInsideTop0 + {{ loop.index0 }} * sectionHeight;
    const auto {{ sctn }}_top1 = {{ sctn }}_top0 + labelY;
    tabviewGlobal->addWidget(globaltabIndex::envelope,
      addGroupLabel(globaltabInsideLeft0, {{ sctn }}_top0, globaltabInnerWidth,
        labelHeight, midTextSize, "{{ sctn.capitalize() }}",
        ALIGN_LEFT | ALIGN_MIDDLE));
    {% for ctrl, addr in controls.items() -%}
    tabviewGlobal->addWidget(globaltabIndex::envelope,
      addKnob(globaltabInsideLeft0 + {{ loop.index0 }} * knobX, {{ sctn }}_top1,
        knobWidth, margin, uiTextSize,
        "{{ ctrl }}", ID::{{ addr }}));
    {% endfor %}
    {% endfor -%}

    {# LFO tab. -#}
    {% for sctn, controls in lfo_items.items() -%}
    const auto {{ sctn }}_top0 = globaltabInsideTop0 + {{ loop.index0 }} * sectionHeight;
    const auto {{ sctn }}_top1 = {{ sctn }}_top0 + labelY;
    tabviewGlobal->addWidget(globaltabIndex::lfo,
      addGroupLabel(globaltabInsideLeft0, {{ sctn }}_top0, globaltabInnerWidth,
        labelHeight, midTextSize, "{{ sctn.capitalize() }}",
        ALIGN_LEFT | ALIGN_MIDDLE));
    {% for ctrl, addr in controls.items() -%}
    tabviewGlobal->addWidget(globaltabIndex::lfo,
      addKnob(globaltabInsideLeft0 + {{ loop.index0 }} * knobX, {{ sctn }}_top1,
        knobWidth, margin, uiTextSize,
        "{{ ctrl }}", ID::{{ addr }}));
    {% endfor %}
    {% endfor -%}

    {# Modulation tab. -#}
    const auto modulationTop0 = globaltabInsideTop0;
    {% for sctn, controls in modulation_items.items() -%}
    const auto mod{{ sctn }}_top0 = modulationTop0 + {{ loop.index0 }} * (sectionHeight + knobY);
    const auto mod{{ sctn }}_top1 = mod{{ sctn }}_top0 + labelY;
    tabviewGlobal->addWidget(globaltabIndex::modulation,
      addGroupLabel(globaltabInsideLeft0, mod{{ sctn }}_top0, globaltabInnerWidth,
        labelHeight, midTextSize, "{{ sctn.capitalize() }}",
        ALIGN_LEFT | ALIGN_MIDDLE));
    {% for ctrl, addr in controls.items() -%}
    tabviewGlobal->addWidget(globaltabIndex::modulation,
      addKnob(globaltabInsideLeft0 + {{ loop.index0 % 8 }} * knobX, mod{{ sctn }}_top1{% if loop.index0 >= 8 %} + knobY{% endif %},
        knobWidth, margin, uiTextSize,
        "{{ ctrl }}", ID::{{ addr }}));
    {% endfor %}
    {% endfor -%}

    tabviewGlobal->refreshTab();

    const auto xyz_crossfade_top0 = top0;
    const auto xyz_crossfade_left0 = left0 + uiMargin + globaltabWidth;
    const auto xyz_crossfade_left1 = xyz_crossfade_left0 + xyPadSize + uiMargin;
    {% for ctrl, addr in modulation_axes.items() -%}
    auto tuple_axis{{ ctrl }} = addKnob(
      xyz_crossfade_left1, xyz_crossfade_top0 + {{ loop.index0 }} * knobY,
      knobWidth, margin, uiTextSize,
      "Axis {{ ctrl }}", ID::{{ addr }});
    widget_axis{{ ctrl }} = std::get<0>(tuple_axis{{ ctrl }});
    {% endfor %}
    const auto xyz_crossfade_top1 = xyz_crossfade_top0;
    addLabel(xyz_crossfade_left0, xyz_crossfade_top1,
      xyPadSize, labelHeight, uiTextSize, "X-Y");
    xypad_xy = addXYPad(
      xyz_crossfade_left0, xyz_crossfade_top1 + labelY,
      xyPadSize, xyPadSize,
      ID::{{ modulation_axes["1"] }}, ID::{{ modulation_axes["2"] }});
    const auto xyz_crossfade_top2 = xyz_crossfade_top1 + crossfade_height;
    addLabel(xyz_crossfade_left0, xyz_crossfade_top2,
      xyPadSize, labelHeight, uiTextSize, "X-Z");
    xypad_xz = addXYPad(
      xyz_crossfade_left0, xyz_crossfade_top2 + labelY,
      xyPadSize, xyPadSize,
      ID::{{ modulation_axes["1"] }}, ID::{{ modulation_axes["3"] }});
    const auto xyz_crossfade_top3 = xyz_crossfade_top2 + crossfade_height;
    addLabel(xyz_crossfade_left0, xyz_crossfade_top3,
      xyPadSize, labelHeight, uiTextSize, "Z-Y");
    xypad_zy = addXYPad(
      xyz_crossfade_left0, xyz_crossfade_top3 + labelY,
      xyPadSize, xyPadSize,
      ID::{{ modulation_axes["3"] }}, ID::{{ modulation_axes["2"] }});
  }
};

UI *createUI() { return new DigiDrieUI(); }

END_NAMESPACE_DISTRHO
