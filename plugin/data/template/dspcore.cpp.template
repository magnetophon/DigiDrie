// Generated by `rewrite_dsp.py`.

#include "dspcore.hpp"

#include <algorithm>
#include <numeric>
#include <random>

#include <iostream>

#define DSPCORE_NAME DSPCore_Plain

inline float
notePitchToFrequency(float notePitch, float equalTemperament = 12.0f, float a4Hz = 440.0f)
{
  return a4Hz * std::pow(2.0f, (notePitch - 69.0f) / equalTemperament);
}

DSPCORE_NAME::DSPCORE_NAME() {
  noteStack.reserve(1024);
}

void DSPCORE_NAME::setup(double sampleRate)
{
  this->sampleRate = sampleRate;

  reset();
}

void DSPCORE_NAME::reset()
{
  noteStack.resize(0);
  synth.init(sampleRate);
  startup();
}

void DSPCORE_NAME::startup() {}

void DSPCORE_NAME::setParameters()
{
  using ID = ParameterID::ID;
  auto &pv = param.value;

  {% for prm in param_data -%}
  synth.{{ prm["varname"] }} = pv[ID::{{ prm["ident"] }}]->getFloat();
  {% endfor %}

  // MIDI parameters.
  // - `{{ midi["freq"]["varname"] }}: note frequency in Hz.
  // - `{{ midi["gate"]["varname"] }}: note gain (velocity).
  // - `{{ midi["gain"]["varname"] }}: note gate.
  // - `{{ midi["channelaftertouch"]["varname"] }}: aftertouch. [0, 127].
  // - `{{ midi["modwheel"]["varname"] }}: CC1 (0x01). [0, 127].
  // - `{{ midi["pitchwheel"]["varname"] }}: pitch bend. [-8192, 8191].
  if (!noteStack.empty()) {
    synth.{{ midi["freq"]["varname"] }} = noteStack.back().frequency;
    synth.{{ midi["gain"]["varname"] }} = noteStack.back().velocity;
    synth.{{ midi["gate"]["varname"] }} = 1.0f;
    synth.{{ midi["channelaftertouch"]["varname"] }} = pv[ID::aftertouch]->getFloat();
    synth.{{ midi["modwheel"]["varname"] }} = pv[ID::modulationWheel]->getFloat();
    synth.{{ midi["pitchwheel"]["varname"] }} = pv[ID::pitchBend]->getFloat();
  } else {
    synth.{{ midi["freq"]["varname"] }} = 0;
    synth.{{ midi["gain"]["varname"] }} = 0;
    synth.{{ midi["gate"]["varname"] }} = 0;
    synth.{{ midi["channelaftertouch"]["varname"] }} = 0;
    synth.{{ midi["modwheel"]["varname"] }} = 0;
    synth.{{ midi["pitchwheel"]["varname"] }} = 0;
  }

  synth.control(&synth.ictrl[0], &synth.rctrl[0]);
}

void DSPCORE_NAME::process(const uint32_t length, float *out0, float *out1)
{
  std::array<float, 2> frame{};
  for (uint32_t i = 0; i < length; ++i) {
    processMidiNote(i);

    synth.compute(nullptr, &frame[0], &synth.ictrl[0], &synth.rctrl[0]);

    out0[i] = frame[0];
    out1[i] = frame[1];
  }
}

void DSPCORE_NAME::noteOn(
  int32_t noteId, int16_t pitch, float tuning, float velocity)
{
  NoteInfo info;
  info.id = noteId;
  info.frequency = notePitchToFrequency(pitch + tuning);
  info.velocity = velocityMap.map(velocity);
  noteStack.push_back(info);
}

void DSPCORE_NAME::noteOff(int32_t noteId)
{
  auto it = std::find_if(noteStack.begin(), noteStack.end(), [&](const NoteInfo &info) {
    return info.id == noteId;
  });
  if (it == noteStack.end()) return;
  noteStack.erase(it);
}
