// TODO: Generate this.

#include <iostream>
#include <memory>
#include <sstream>
#include <tuple>
#include <unordered_map>
#include <vector>

#include "../common/uibase.hpp"
#include "parameter.hpp"

START_NAMESPACE_DISTRHO

constexpr float uiTextSize = 14.0f;
constexpr float midTextSize = 16.0f;
constexpr float infoTextSize = 18.0f;
constexpr float pluginNameTextSize = 22.0f;
constexpr float margin = 5.0f;
constexpr float uiMargin = 20.0f;
constexpr float labelHeight = 20.0f;
constexpr float labelY = 30.0f;
constexpr float knobWidth = 50.0f;
constexpr float knobHeight = 40.0f;
constexpr float spreadKnobWidth = 20.0f;
constexpr float knobX = 60.0f; // With margin.
constexpr float knobY = knobHeight + labelY;

constexpr float sectionHeight = labelY + spreadKnobWidth + knobY;
constexpr float innerWidth = 1200;
constexpr float innerHeight = 700;

constexpr uint32_t defaultWidth = uint32_t(2 * uiMargin + innerWidth);
constexpr uint32_t defaultHeight = uint32_t(2 * uiMargin + innerHeight);

enum tabIndex {
  {% for idx in range(nrMacro) -%}
    macro_{{ idx + 1 }},
  {% endfor -%}
  fallback,
};

class DigiDrieUI : public PluginUIBase {
protected:
  void onNanoDisplay() override
  {
    beginPath();
    rect(0, 0, getWidth(), getHeight());
    fillColor(palette.background());
    fill();
  }

  DISTRHO_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR(DigiDrieUI)

public:
  DigiDrieUI() : PluginUIBase(defaultWidth, defaultHeight)
  {
    param = std::make_unique<GlobalParameter>();

    setGeometryConstraints(defaultWidth, defaultHeight, true, true);

    if (palette.fontPath().size() > 0)
      fontId = createFontFromFile("main", palette.fontPath().c_str());

    if (fontId < 0) {
      fontId = createFontFromMemory(
        "main", (unsigned char *)(FontData::TinosBoldItalicData),
        FontData::TinosBoldItalicDataSize, false);
    }

    using ID = ParameterID::ID;

    const auto top0 = 20.0f;
    const auto left0 = 20.0f;

    // TabView test.
    const auto tabTop0 = top0;
    const auto tabLeft0 = left0;
    const auto tabWidth = 8 * knobX + 2 * uiMargin;
    const auto tabHeight = innerHeight;
    std::vector<std::string> tabs = {
      {% for idx in range(nrMacro) -%}
        "Macro{{ idx + 1 }}",
      {% endfor -%}
      "Fallback",
    };
    auto tabviewMacro
      = addTabView(tabLeft0, tabTop0, tabWidth, tabHeight, uiTextSize, labelY, tabs);

    const auto tabInsideTop0 = tabTop0 + labelY + uiMargin;
    const auto tabInsideLeft0 = tabLeft0 + uiMargin;

    {% for macro, sections in osc_items.items() -%}
    {% for sctn, controls in sections.items() -%}
    const auto {{ macro }}_{{ sctn }}_top0 = tabInsideTop0 + {{ loop.index0 }} * sectionHeight;
    const auto {{ macro }}_{{ sctn }}_top1 = {{ macro }}_{{ sctn }}_top0 + labelY;
    const auto {{ macro }}_{{ sctn }}_top2 = {{ macro }}_{{ sctn }}_top1 + spreadKnobWidth;
    tabviewMacro->addWidget({{ macro }},
      addGroupLabel(tabInsideLeft0, {{ macro }}_{{ sctn }}_top0, 8.0f * knobX,
        labelHeight, midTextSize, "{{ sctn.capitalize() }}"));
    {% for ctrl, addr in controls.items() -%}
    tabviewMacro->addWidget({{ macro }},
      addKnob(tabInsideLeft0 + {{ loop.index0 }} * knobX, {{ macro }}_{{ sctn }}_top1, spreadKnobWidth + 10, margin, uiTextSize,
        "", ID::{{ addr["L-R_offset"] }}));
    {%- if ctrl == "octave" -%}
    tabviewMacro->addWidget({{ macro }},
      addNumberKnob(tabInsideLeft0 + {{ loop.index0 }} * knobX, {{ macro }}_{{ sctn }}_top2, knobWidth, margin, uiTextSize,
        "{{ ctrl }}", ID::{{ addr["main"] }}, Scales::octave));
    {%- else -%}
    tabviewMacro->addWidget({{ macro }},
      addKnob(tabInsideLeft0 + {{ loop.index0 }} * knobX, {{ macro }}_{{ sctn }}_top2, knobWidth, margin, uiTextSize,
        "{{ ctrl }}", ID::{{ addr["main"] }}));
    {%- endif %}
    {% endfor %}
    {% endfor %}
    {% endfor -%}

    {# TODO: fallback tab #}

    tabviewMacro->refreshTab();

    {# TODO: osc_type #}
  }
};

UI *createUI() { return new DigiDrieUI(); }

END_NAMESPACE_DISTRHO
