declare author "Bart Brouns";
declare license "AGPLv3";
declare name "DigiDrie";
declare options "[midi:on]";
import("stdfaust.lib");
///////////////////////////////////////////////////////////////////////////////
//                                    GUI                                    //
///////////////////////////////////////////////////////////////////////////////

//groups///////////////////////////////////////////////////////////////////////

tabs(x) = tgroup("CZsynth", x);

globalGroup(x)        = tabs(hgroup("[000]global", x));
filterGroup(x)        = tabs(hgroup("[001]filter", x));

A(x)                  = tabs(hgroup("[100]A", x));
B(x)                  = tabs(hgroup("[101]B", x));
C(x)                  = tabs(hgroup("[102]C", x));
D(x)                  = tabs(hgroup("[103]D", x));

sineGroup(x)          = tabs(hgroup("[210]sine", x));
CZsawGroup(x)         = tabs(hgroup("[211]CZ saw", x));
CZsquareGroup(x)      = tabs(hgroup("[212]CZ square", x));
CZpulseGroup(x)       = tabs(hgroup("[213]CZ pulse", x));
CZsinePulseGroup(x)   = tabs(hgroup("[214]CZ sinePulse", x));
CZhalfSineGroup(x)    = tabs(hgroup("[215]CZ halfSine", x));
CZresSawGroup(x)      = tabs(hgroup("[216]CZ resSaw", x));
CZresTriangleGroup(x) = tabs(hgroup("[217]CZ resTriangle", x));
CZresTrapGroup(x)     = tabs(hgroup("[218]CZ resTrap", x));
sawGroup(x)           = tabs(hgroup("[219]saw", x));

envelopeGroup(i,x)    = tabs(vgroup("[300]envelopes", hgroup("envelope %i", x)));
lfoGroup(i,x)         = tabs(vgroup("[301]LFOs", hgroup("lfo %i", x)));
macroGroup(i,x)       = tabs(vgroup("[302]modulation", hgroup("%i", x)));

midiGroup(x)          = tabs(hgroup("[999]midi", x));

mainGroup(x)          = stereoGroup(vgroup("[0]main", x));
offsetGroup(x)        = stereoGroup(vgroup("[1]L-R offset", x));
stereoGroup(x)        = tgroup("stereo", x);

filterTabsGroup(x) = tgroup("mix/tweak",x);
filterMixerGroup(x) = filterTabsGroup(hgroup("mix",x));
filterTweakGroup(x) = filterTabsGroup(hgroup("tweak",x));

moogGroup(x)     = filterMixerGroup(preFilterGroup(hgroup("[0]moog", x)));
ms20Group(x)     = filterMixerGroup(preFilterGroup(hgroup("[1]ms20", x)));
oberheimGroup(x) = filterMixerGroup(preFilterGroup(hgroup("[2]oberheim", x)));
normFreqGroup(x) = filterTweakGroup(preFilterGroup(hgroup("[3]freq", x)));
QGroup(x)        = filterTweakGroup(preFilterGroup(hgroup("[4] Q ", x)));

oscTabsGroup(x) = tgroup("CZ/PM",x);
oscCZgroup(x) = oscTabsGroup(hgroup("CZ",x));
oscPMgroup(x) = oscTabsGroup(hgroup("PM",x));

levelGroup(x) = oscGroup(oscCZgroup(hgroup("[0]level", x)));
indexGroup(x) = oscGroup(oscCZgroup(hgroup("[1]index", x)));
octGroup(x)   = oscGroup(oscCZgroup(hgroup("[2]octave", x)));
phaseGroup(x) = oscGroup(oscCZgroup(hgroup("[3]phase", x)));

fbAgroup(x) = oscGroup(oscPMgroup(hgroup("[0]PM A", x)));
fbBgroup(x) = oscGroup(oscPMgroup(hgroup("[1]PM B", x)));
fbCgroup(x) = oscGroup(oscPMgroup(hgroup("[2]PM C", x)));
fbDgroup(x) = oscGroup(oscPMgroup(hgroup("[3]PM D", x)));

oscGroup(x)       = hgroup("oscillator",x);
preFilterGroup(x) = hgroup("preFilter",x);
vectorGroup(x)    = hgroup("vector",x);

modSourceGroup(x)    = hgroup("[0]modulation sources", x);
envLFOmasterGroup(x) = masterGroup(hgroup("[1]envelopes & LFOs",x));
amountGroup(x)       = masterGroup(hgroup("[2]amount", x));

masterGroup(x) = hgroup("masters",x);

ac_bdGroup(x) = vectorGroup(hgroup("ac-bd",x));
ab_cdGroup(x) = vectorGroup(hgroup("ab-cd",x));

//sliders//////////////////////////////////////////////////////////////////////
masterPhase      = globalGroup(vslider("masterPhase", 0, -1, 1, stepsize) :new_smooth(0.999));
portamento       = globalGroup(vslider("portamento[scale:log]", 0, 0, 1, stepsize));
freefloat        = globalGroup(checkbox("free float osc[scale:int]"));
portamentoSwitch = globalGroup(vslider("porta off-auto-on[scale:int][style:menu{'off':0;'auto':1;'on':2}]", 1, 0, 2, 1));

ac_bd_slider = hslider("ac-bd[style:knob]", 0, 0, 1, stepsize);
ab_cd_slider = hslider("ab-cd[style:knob]", 0, 0, 1, stepsize);
ab(i,gate,gain) = modMixer(globalGroup,ac_bdGroup,i,ac_bd_slider,gate,gain);
cd(i,gate,gain) = modMixer(globalGroup,ab_cdGroup,i,ab_cd_slider,gate,gain);

ac_bd = modMixer(globalGroup,ac_bdGroup,i,ac_bd_slider,gate,gain);
cb_cd = modMixer(globalGroup,ab_cdGroup,i,ab_cd_slider,gate,gain);


oscillatorLevel = hslider("[0]Level[style:knob]", 0, -1, 1, stepsize);
oscillatorPhase = hslider("[1]phase[style:knob]", 0, -64, 64, stepsize);
oscillatorIndex = hslider("[2]index[style:knob]", 0, 0, 1, stepsize);// an osc has either index or res never both so same [number] is OK
oscillatorRes   = hslider("[2]res[style:knob]", 0, 0, 64, stepsize);// an osc has either index or res never both so same [number] is OK
oct             = hslider("[3]octave[style:knob]", 0, minOct, maxOct, stepsize);

type = vslider("type[scale:int][style:menu{'Sine':0;'Sawtooth':1;'Square':2;'Pulse':3;'Sine-Pulse':4;'Half Sine':5;'Resonant Saw':6;'Resonant Tri':7;'Resonant Trap':8}]", 2, 0, 8, 1);

fbAs = hslider("PM A[scale:log][style:knob]", 0, -20 , 20 , stepsize);
fbBs = hslider("PM B[scale:log][style:knob]", 0, -20 , 20 , stepsize);
fbCs = hslider("PM C[scale:log][style:knob]", 0, -20 , 20 , stepsize);
fbDs = hslider("PM D[scale:log][style:knob]", 0, -20 , 20 , stepsize);

envLevel(subGroup,i)   = subGroup(modSourceGroup(vgroup("[0]envelopes" , hslider("env %i[style:knob]", 0, -1, 1, stepsize))));
lfoLevel(subGroup,i)   = subGroup(modSourceGroup(vgroup("[1]LFOs"      , hslider("LFO  %i[style:knob]", 0, -1, 1, stepsize))));
macroLevel(subGroup,i) = subGroup(modSourceGroup(vgroup("[2]macros"    , hslider("macro %i[style:knob]", 0, -1, 1, stepsize))));

attack(i)   = envelopeGroup(i,hslider("[0]attack[scale:log]", defaultAttack, 0, maxAttack, stepsize));
decay(i)    = envelopeGroup(i,hslider("[1]decay[scale:log]", defaultRelease, 0, maxDecay, stepsize));
sustain(i)  = envelopeGroup(i,hslider("[2]sustain", defaultSustain, 0, 1, stepsize));
release(i)  = envelopeGroup(i,hslider("[3]release[scale:log]", defaultRelease, 0, maxRelease, stepsize));
velSens(i)  = envelopeGroup(i,hslider("[4]vel sens", 0, 0, 1, stepsize));
envMeter(i) = envelopeGroup(i,hbargraph("[5]envelope %i", 0, 1));

lfo_freq(i) = lfoGroup(i,hslider("[0]lfo freq[scale:log]", 1, 0, 99, stepsize));
lfoMeter(i) = lfoGroup(i,hbargraph("[1]lfo %i", -1, 1));

macroSlider = hslider("[0]macro", 0, 0, 1, stepsize);
macroEnvelopeLevel(i) = hgroup("env", hslider("%i[style:knob]", 0, 0, 1, stepsize));
macroLFOlevel(i) = hgroup("lfo", hslider("%i[style:knob]", 0, 0, 1, stepsize));

macroUp     = hslider("[1]up time[style:knob]", defaultRelease, 0, maxAttack, stepsize);
macroDown   = hslider("[2]down time[style:knob]", defaultRelease, 0, maxRelease, stepsize);
curveSlider = hslider("[3]curve[style:knob]", 0, -10, 10, stepsize);

mapping(x) =
  x;
//pow(x,curveIndex);
curveIndex = select2(curveSlider>0
                    , 1/(abs(curveSlider)+1)
                    , curveSlider+1
                    );

lfo_amount = hslider("lfo amount", 0, 0, 1, stepsize):new_smooth(0.999);
velocity(i) = VEL(i:max(-1):int) with {
  VEL =
    case {
      (-1) => 0;
      (i) => midiGroup(midiTabs(tabNr(i),vslider("vel %i [midi:key %i ]", 0, 0, 127, 1)));
    };
  midiTabs(tabNr,x) = tgroup("velocity",hgroup("v %tabNr", x));
  tabNr(i) = (i/nrTabs):floor;
  nrTabs = int((nrNotes+1)/32)+1;
};


// pre-filter /////////////////////////////////////////////////////////////////
LPfreq = hslider("LPfreq[scale:log]", 24000, 20, 24000, 1);

filterBPlevel = hslider("filterBPlevel[style:knob]", 1, 0, 1, stepsize);
moogLevel     = hslider("level[style:knob]", 0, -1, 1, stepsize);
ms20level     = hslider("level[style:knob]", 0, -1, 1, stepsize);
oberheimLevel = hslider("level[style:knob]", 0, -1, 1, stepsize);
normFreq      = hslider("normFreq[style:knob]", 0, 0, 1, stepsize);
Q             = hslider(" Q [style:knob]", 0, 0, 10, stepsize);
